window.addEventListener('DOMContentLoaded', () => {
    // Check xem c√≥ ph·∫£i trang ideas.html kh√¥ng
    if (!document.getElementById('full-idea-list')) return;
    if (typeof db === 'undefined') return;

    const ideaListEl = document.getElementById('full-idea-list');
    const addBtn = document.getElementById('add-idea-btn-full');
    const inputEl = document.getElementById('idea-input-full');
    let ideas = [];

    // Custom Alert Function
    const showCustomAlert = (message) => {
        return new Promise((resolve) => {
            const alertOverlay = document.getElementById('custom-alert');
            const alertMessage = document.getElementById('alert-message');
            const alertOkBtn = document.getElementById('alert-ok-btn');

            alertMessage.textContent = message;
            alertOverlay.classList.add('show');

            const handleOk = () => {
                alertOverlay.classList.remove('show');
                alertOkBtn.removeEventListener('click', handleOk);
                resolve();
            };

            alertOkBtn.addEventListener('click', handleOk);
        });
    };

    // Custom Confirm Function
    const showCustomConfirm = (message) => {
        return new Promise((resolve) => {
            const confirmOverlay = document.getElementById('custom-confirm');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmYesBtn = document.getElementById('confirm-yes-btn');
            const confirmNoBtn = document.getElementById('confirm-no-btn');

            confirmMessage.textContent = message;
            confirmOverlay.classList.add('show');

            const handleYes = () => {
                confirmOverlay.classList.remove('show');
                confirmYesBtn.removeEventListener('click', handleYes);
                confirmNoBtn.removeEventListener('click', handleNo);
                resolve(true);
            };

            const handleNo = () => {
                confirmOverlay.classList.remove('show');
                confirmYesBtn.removeEventListener('click', handleYes);
                confirmNoBtn.removeEventListener('click', handleNo);
                resolve(false);
            };

            confirmYesBtn.addEventListener('click', handleYes);
            confirmNoBtn.addEventListener('click', handleNo);
        });
    };

    // H√†m ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ √Ω t∆∞·ªüng
    const renderIdeas = () => {
        ideaListEl.innerHTML = '';
        if (ideas.length === 0) {
            ideaListEl.innerHTML = '<p>Ch∆∞a c√≥ √Ω t∆∞·ªüng n√†o...</p>';
            return;
        }
        ideas.forEach((ideaText, index) => {
            const item = document.createElement('div');
            item.className = 'idea-item';
            item.innerHTML = `
                <span class="idea-text">${ideaText}</span>
                <button class="delete-idea-btn" data-index="${index}">X</button>
            `;
            ideaListEl.appendChild(item);
        });
    };

    // ƒê·ª£i realtime sync kh·ªüi t·∫°o
    const waitForRealtimeSync = () => {
        return new Promise((resolve) => {
            const check = () => {
                if (window.realtimeSync && window.realtimeSync.isInitialized) {
                    resolve();
                } else {
                    setTimeout(check, 100);
                }
            };
            check();
        });
    };

    // Kh·ªüi t·∫°o v·ªõi ƒë·ªìng b·ªô th·ªùi gian th·ª±c
    const initIdeas = async () => {
        try {
            await waitForRealtimeSync();
            
            // L·∫Øng nghe thay ƒë·ªïi √Ω t∆∞·ªüng theo th·ªùi gian th·ª±c
            window.realtimeSync.listenToIdeas((newIdeas) => {
                ideas = newIdeas || [];
                renderIdeas();
                console.log('üí° √ù t∆∞·ªüng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c');
            });

            console.log('‚úÖ Trang √Ω t∆∞·ªüng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªìng b·ªô th·ªùi gian th·ª±c!');
        } catch (error) {
            console.error('‚ùå L·ªói khi thi·∫øt l·∫≠p ƒë·ªìng b·ªô th·ªùi gian th·ª±c:', error);
        }
    };

    initIdeas();

    // X·ª≠ l√Ω n√∫t Th√™m
    addBtn.addEventListener('click', async () => {
        const newIdea = inputEl.value.trim();
        if (!newIdea) {
            await showCustomAlert('Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng tr∆∞·ªõc khi th√™m!');
            return;
        }
        
        // Th√™m v√†o m·∫£ng t·∫°m
        ideas.push(newIdea);
        
        // C·∫≠p nh·∫≠t l√™n Firebase v·ªõi realtime sync
        const success = await window.realtimeSync.updateIdeas(ideas);
        
        if (success) {
            inputEl.value = '';
            await showCustomAlert('‚úÖ ƒê√£ th√™m √Ω t∆∞·ªüng m·ªõi th√†nh c√¥ng!');
            console.log('‚úÖ ƒê√£ th√™m √Ω t∆∞·ªüng m·ªõi:', newIdea);
        } else {
            console.error('‚ùå L·ªói khi th√™m √Ω t∆∞·ªüng');
            await showCustomAlert('‚ùå C√≥ l·ªói x·∫£y ra khi th√™m √Ω t∆∞·ªüng!');
        }
    });

    // X·ª≠ l√Ω n√∫t X√≥a (d√πng event delegation)
    ideaListEl.addEventListener('click', async (e) => {
        if (e.target.classList.contains('delete-idea-btn')) {
            const indexToDelete = parseInt(e.target.dataset.index);
            const confirmed = await showCustomConfirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a √Ω t∆∞·ªüng: "${ideas[indexToDelete]}"?`);
            
            if (confirmed) {
                // X√≥a kh·ªèi m·∫£ng t·∫°m
                const deletedIdea = ideas[indexToDelete];
                ideas.splice(indexToDelete, 1);
                
                // C·∫≠p nh·∫≠t l√™n Firebase v·ªõi realtime sync
                const success = await window.realtimeSync.updateIdeas(ideas);
                
                if (success) {
                    await showCustomAlert('‚úÖ ƒê√£ x√≥a √Ω t∆∞·ªüng th√†nh c√¥ng!');
                    console.log('‚úÖ ƒê√£ x√≥a √Ω t∆∞·ªüng:', deletedIdea);
                } else {
                    console.error('‚ùå L·ªói khi x√≥a √Ω t∆∞·ªüng');
                    await showCustomAlert('‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a √Ω t∆∞·ªüng!');
                    // Kh√¥i ph·ª•c l·∫°i √Ω t∆∞·ªüng n·∫øu l·ªói
                    ideas.splice(indexToDelete, 0, deletedIdea);
                }
            }
        }
    });

    // H·ªó tr·ª£ Enter key ƒë·ªÉ th√™m √Ω t∆∞·ªüng
    inputEl.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addBtn.click();
        }
    });
});