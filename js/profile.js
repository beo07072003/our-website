// Ch·ª©a c√°c h√†m cho c√°c trang c·ªßa "anh" (him-dashboard.html v√† profile.html)

/**
 * ƒê√¢y l√† h√†m ƒëi·ªÅu khi·ªÉn ch√≠nh cho c√°c trang c·ªßa "anh".
 * N√≥ ƒë∆∞·ª£c g·ªçi t·ª´ app.js v√† quy·∫øt ƒë·ªãnh ch·∫°y h√†m n√†o d·ª±a tr√™n trang hi·ªán t·∫°i.
 * @param {object} herData - D·ªØ li·ªáu t·ª´ document 'herData'.
 * @param {object} hisData - D·ªØ li·ªáu t·ª´ document 'hisData'.
 */
function runHimPages(herData, hisData) {
    runProfilePage(hisData); // Ch·∫°y h√†m cho trang profile c√° nh√¢n.
    runHimDashboard(herData, hisData); // Ch·∫°y h√†m cho trang b·∫£ng ƒëi·ªÅu khi·ªÉn.
}

// ===================================================================
// C√ÅC H√ÄM CHO TRANG PROFILE C√Å NH√ÇN (profile.html)
// ===================================================================

/**
 * Kh·ªüi ch·∫°y logic cho trang profile c√° nh√¢n.
 * @param {object} data - D·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng (hisData ho·∫∑c herData).
 */
function runProfilePage(data) {
    const profileContainer = document.querySelector('.profile-container');
    // Check n√†y ƒë·∫£m b·∫£o code ch·ªâ ch·∫°y khi ·ªü ƒë√∫ng trang profile.html
    if (!profileContainer) return;
    
    displayProfileData(data);
}

/**
 * Hi·ªÉn th·ªã d·ªØ li·ªáu profile l√™n giao di·ªán.
 * @param {object} data - D·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng.
 */
function displayProfileData(data) {
    const profileImage = document.getElementById('profile-image');
    const profileName = document.getElementById('profile-name');
    const profileBio = document.getElementById('profile-bio');
    const interestsContainer = document.getElementById('profile-interests');

    if (profileImage && data.profileImageUrl) profileImage.src = data.profileImageUrl;
    if (profileName && data.name) profileName.innerText = data.name;
    if (profileBio && data.bio) profileBio.innerText = data.bio;
    if (interestsContainer && data.interests && Array.isArray(data.interests)) {
        interestsContainer.innerHTML = '';
        data.interests.forEach(interest => {
            const tag = document.createElement('span');
            tag.className = 'interest-tag';
            tag.innerText = interest;
            interestsContainer.appendChild(tag);
        });
    }
}


// ===================================================================
// C√ÅC H√ÄM CHO TRANG B·∫¢NG ƒêI·ªÄU KHI·ªÇN (him-dashboard.html)
// ===================================================================

/**
 * Kh·ªüi ch·∫°y logic cho trang b·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa "anh".
 * @param {object} herData - D·ªØ li·ªáu c·ªßa "em" (ƒë·ªÉ xem l·ªãch).
 * @param {object} hisData - D·ªØ li·ªáu c·ªßa "anh" (ƒë·ªÉ qu·∫£n l√Ω √Ω t∆∞·ªüng).
 */
function runHimDashboard(herData, hisData) {
    const dashboardContainer = document.querySelector('.dashboard-container');
    // Check n√†y ƒë·∫£m b·∫£o code ch·ªâ ch·∫°y tr√™n trang him-dashboard.html
    if (!dashboardContainer || !document.getElementById('save-note-btn')) return;

    // Ch·∫°y c√°c widget
    setupNoteWidget();
    setupIdeaWidget(hisData.ideaBank || []);
    setupSchedulePreview(herData.schedule || []);
    setupDatePlanner(herData.dateNightPlan);
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "H·ªôp Th∆∞ G·ª≠i Em".
 */
function setupNoteWidget() {
    const saveBtn = document.getElementById('save-note-btn');
    const noteInput = document.getElementById('note-input');
    if(!saveBtn) return;

        saveBtn.addEventListener('click', async () => {
            const noteText = noteInput.value.trim();
            if (!noteText) {
                alert('Vui l√≤ng nh·∫≠p n·ªôi dung th∆∞!');
                return;
            }
            
            // Disable button ƒë·ªÉ tr√°nh double click
            saveBtn.disabled = true;
            saveBtn.textContent = 'ƒêang g·ª≠i...';
            
            try {
                const hisDataRef = db.collection('userInfo').doc('hisData');
                
                // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
                const hisDoc = await hisDataRef.get();
                const currentData = hisDoc.exists ? hisDoc.data() : {};
                const existingNotes = currentData.notesForHer || [];
                
                // T·∫°o th∆∞ m·ªõi
                const newNote = {
                    message: noteText,
                    timestamp: new Date().toISOString(),
                    id: Date.now().toString()
                };
                
                // Th√™m th∆∞ m·ªõi v√†o danh s√°ch
                const updatedNotes = [newNote, ...existingNotes];
                
                // C·∫≠p nh·∫≠t l√™n Firebase
                await hisDataRef.update({
                    notesForHer: updatedNotes,
                    lastUpdated: new Date().toISOString()
                });
                
                noteInput.value = '';
                alert('ƒê√£ g·ª≠i th∆∞ th√†nh c√¥ng! üíå Em s·∫Ω nh·∫≠n ƒë∆∞·ª£c th∆∞ ngay l·∫≠p t·ª©c!');
                
                console.log('‚úÖ ƒê√£ g·ª≠i th∆∞ m·ªõi:', newNote);
                
            } catch (error) {
                console.error("L·ªói khi g·ª≠i th∆∞:", error);
                alert("ƒê√£ c√≥ l·ªói x·∫£y ra khi g·ª≠i th∆∞.");
            } finally {
                // Re-enable button
                saveBtn.disabled = false;
                saveBtn.textContent = 'G·ª≠i v√†o h·ªôp th∆∞';
            }
        });
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "Ng√¢n H√†ng √ù T∆∞·ªüng" (B·∫£n xem tr∆∞·ªõc).
 * @param {string[]} initialIdeas - M·∫£ng c√°c √Ω t∆∞·ªüng t·ª´ Firestore.
 */
function setupIdeaWidget(initialIdeas) {
    const ideaList = document.getElementById('idea-preview-list');
    if (!ideaList) return;

    ideaList.innerHTML = '';
    const ideasToShow = initialIdeas.slice(-3).reverse(); // L·∫•y 3 √Ω t∆∞·ªüng g·∫ßn nh·∫•t

    if (ideasToShow.length === 0) {
        ideaList.innerHTML = '<p>Ch∆∞a c√≥ √Ω t∆∞·ªüng n√†o...</p>';
    } else {
        ideasToShow.forEach(ideaText => {
            const p = document.createElement('p');
            p.innerText = `- ${ideaText}`;
            ideaList.appendChild(p);
        });
    }
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget xem tr∆∞·ªõc "L·ªãch Tu·∫ßn C·ªßa Em".
 * @param {object[]} schedule - M·∫£ng c√°c s·ª± ki·ªán t·ª´ Firestore.
 */
function setupSchedulePreview(schedule) {
    const previewEl = document.getElementById('next-event-preview');
    if (!previewEl) return;

    if (!schedule || schedule.length === 0) {
        previewEl.innerHTML = '<p>Tu·∫ßn n√†y em r·∫£nh!</p>';
        return;
    }
    
    // T√¨m s·ª± ki·ªán s·∫Øp t·ªõi d·ª±a tr√™n timeline th·ª±c t·∫ø
    const now = new Date();
    const currentDay = now.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ..., 6 = Th·ª© 7
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    const currentTime = currentHour * 60 + currentMinute;
    
    // Convert currentDay to match schedule format (2 = Th·ª© 2, 3 = Th·ª© 3, ..., 8 = Ch·ªß nh·∫≠t)
    const scheduleCurrentDay = currentDay === 0 ? 8 : currentDay + 1;
    
    let nextEvent = null;
    let earliestEvent = null;
    
    // S·∫Øp x·∫øp events theo timeline
    const sortedEvents = schedule.sort((a, b) => {
        if (a.day !== b.day) return a.day - b.day;
        return a.startTime.localeCompare(b.startTime);
    });
    
    // T√¨m s·ª± ki·ªán s·∫Øp t·ªõi
    for (const event of sortedEvents) {
        const [eventHour, eventMinute] = event.startTime.split(':').map(Number);
        const eventTime = eventHour * 60 + eventMinute;
        
        // N·∫øu event trong ng√†y hi·ªán t·∫°i v√† th·ªùi gian ch∆∞a qua
        if (event.day === scheduleCurrentDay && eventTime > currentTime) {
            nextEvent = event;
            break;
        }
        // N·∫øu event trong ng√†y t∆∞∆°ng lai
        else if (event.day > scheduleCurrentDay) {
            nextEvent = event;
            break;
        }
        
        // L∆∞u event ƒë·∫ßu ti√™n l√†m fallback
        if (!earliestEvent) {
            earliestEvent = event;
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y event s·∫Øp t·ªõi, l·∫•y event ƒë·∫ßu ti√™n trong tu·∫ßn
    if (!nextEvent) {
        nextEvent = earliestEvent;
    }
    
    // Format ng√†y hi·ªÉn th·ªã
    const dayNames = ['', '', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß Nh·∫≠t'];
    const dayName = dayNames[nextEvent.day] || `Ng√†y ${nextEvent.day}`;
    
    previewEl.innerHTML = `
        <p>S·ª± ki·ªán ti·∫øp theo</p>
        <div class="event-title">${nextEvent.title}</div>
        <div class="event-time">${dayName} - ${nextEvent.startTime}</div>
    `;
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "K·∫ø Ho·∫°ch H·∫πn H√≤".
 * @param {object} plan - Object k·∫ø ho·∫°ch h·∫πn h√≤ t·ª´ Firestore.
 */
function setupDatePlanner(plan) {
    const displayEl = document.getElementById('date-plan-display');
    const manageBtn = document.getElementById('manage-date-plan-btn');
    const modal = document.getElementById('date-plan-modal');
    if (!displayEl) return;

    // Hi·ªÉn th·ªã k·∫ø ho·∫°ch hi·ªán t·∫°i
    if (plan && plan.isActive) {
        const date = plan.dateTime.toDate();
        displayEl.innerHTML = `
            <div class="plan-title">${plan.title}</div>
            <div class="plan-time">${date.toLocaleDateString('vi-VN')} - ${date.toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'})}</div>
            <p>${plan.location}</p>
        `;
    } else {
        displayEl.innerHTML = '<p>Ch∆∞a c√≥ k·∫ø ho·∫°ch n√†o. H√£y t·∫°o m·ªôt bu·ªïi h·∫πn b·∫•t ng·ªù!</p>';
    }

    // X·ª≠ l√Ω n√∫t b·∫•m m·ªü modal
    manageBtn.addEventListener('click', () => {
        if (plan && plan.isActive) { // ƒêi·ªÅn th√¥ng tin c≈© n·∫øu c√≥
            document.getElementById('date-title-input').value = plan.title;
            const date = plan.dateTime.toDate();
            date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
            document.getElementById('date-time-input').value = date.toISOString().slice(0,16);
            document.getElementById('date-location-input').value = plan.location;
            document.getElementById('date-note-input').value = plan.note;
        }
        modal.classList.add('visible');
    });

    // X·ª≠ l√Ω c√°c n√∫t trong modal
    document.getElementById('cancel-date-plan-button')?.addEventListener('click', () => modal.classList.remove('visible'));
    
    document.getElementById('save-date-plan-button')?.addEventListener('click', async () => {
        const newPlan = {
            isActive: true,
            title: document.getElementById('date-title-input').value,
            dateTime: new Date(document.getElementById('date-time-input').value),
            location: document.getElementById('date-location-input').value,
            note: document.getElementById('date-note-input').value,
        };
        const herDataRef = db.collection('userInfo').doc('herData');
        await herDataRef.update({ dateNightPlan: newPlan });
        alert('ƒê√£ g·ª≠i l·ªùi m·ªùi h·∫πn h√≤! ‚ù§Ô∏è');
        location.reload();
    });

    document.getElementById('delete-date-plan-button')?.addEventListener('click', async () => {
        if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy k·∫ø ho·∫°ch h·∫πn h√≤ n√†y?')) return;
        const herDataRef = db.collection('userInfo').doc('herData');
        await herDataRef.update({ 'dateNightPlan.isActive': false });
        alert('ƒê√£ h·ªßy k·∫ø ho·∫°ch.');
        location.reload();
    });
}