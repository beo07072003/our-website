// Ch·ª©a c√°c h√†m cho c√°c trang c·ªßa "anh" (him-dashboard.html v√† profile.html)

/**
 * ƒê√¢y l√† h√†m ƒëi·ªÅu khi·ªÉn ch√≠nh cho c√°c trang c·ªßa "anh".
 * N√≥ ƒë∆∞·ª£c g·ªçi t·ª´ app.js v√† quy·∫øt ƒë·ªãnh ch·∫°y h√†m n√†o d·ª±a tr√™n trang hi·ªán t·∫°i.
 * @param {object} herData - D·ªØ li·ªáu t·ª´ document 'herData'.
 * @param {object} hisData - D·ªØ li·ªáu t·ª´ document 'hisData'.
 */
function runHimPages(herData, hisData) {
    runProfilePage(hisData); // Ch·∫°y h√†m cho trang profile c√° nh√¢n.
    runHimDashboard(herData, hisData); // Ch·∫°y h√†m cho trang b·∫£ng ƒëi·ªÅu khi·ªÉn.
}

// ===================================================================
// C√ÅC H√ÄM CHO TRANG PROFILE C√Å NH√ÇN (profile.html)
// ===================================================================

/**
 * Kh·ªüi ch·∫°y logic cho trang profile c√° nh√¢n.
 * @param {object} data - D·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng (hisData ho·∫∑c herData).
 */
function runProfilePage(data) {
    const profileContainer = document.querySelector('.profile-container');
    // Check n√†y ƒë·∫£m b·∫£o code ch·ªâ ch·∫°y khi ·ªü ƒë√∫ng trang profile.html
    if (!profileContainer) return;
    
    displayProfileData(data);
}

/**
 * Hi·ªÉn th·ªã d·ªØ li·ªáu profile l√™n giao di·ªán.
 * @param {object} data - D·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng.
 */
function displayProfileData(data) {
    const profileImage = document.getElementById('profile-image');
    const profileName = document.getElementById('profile-name');
    const profileBio = document.getElementById('profile-bio');
    const interestsContainer = document.getElementById('profile-interests');

    if (profileImage && data.profileImageUrl) profileImage.src = data.profileImageUrl;
    if (profileName && data.name) profileName.innerText = data.name;
    if (profileBio && data.bio) profileBio.innerText = data.bio;
    if (interestsContainer && data.interests && Array.isArray(data.interests)) {
        interestsContainer.innerHTML = '';
        data.interests.forEach(interest => {
            const tag = document.createElement('span');
            tag.className = 'interest-tag';
            tag.innerText = interest;
            interestsContainer.appendChild(tag);
        });
    }
}


// ===================================================================
// C√ÅC H√ÄM CHO TRANG B·∫¢NG ƒêI·ªÄU KHI·ªÇN (him-dashboard.html)
// ===================================================================

/**
 * Kh·ªüi ch·∫°y logic cho trang b·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa "anh".
 * @param {object} herData - D·ªØ li·ªáu c·ªßa "em" (ƒë·ªÉ xem l·ªãch).
 * @param {object} hisData - D·ªØ li·ªáu c·ªßa "anh" (ƒë·ªÉ qu·∫£n l√Ω √Ω t∆∞·ªüng).
 */
function runHimDashboard(herData, hisData) {
    const dashboardContainer = document.querySelector('.dashboard-container');
    // Check n√†y ƒë·∫£m b·∫£o code ch·ªâ ch·∫°y tr√™n trang him-dashboard.html
    if (!dashboardContainer || !document.getElementById('save-note-btn')) return;

    // Ch·∫°y c√°c widget
    setupNoteWidget();
    setupIdeaWidget(hisData.ideaBank || []);
    setupSchedulePreview(herData.schedule || []);
    setupDatePlanner(herData.dateNightPlan);
    setupCountdownEvent(hisData.countdownEvent);
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "H·ªôp Th∆∞ G·ª≠i Em".
 */
function setupNoteWidget() {
    const saveBtn = document.getElementById('save-note-btn');
    const noteInput = document.getElementById('note-input');
    if(!saveBtn) return;

        saveBtn.addEventListener('click', async () => {
            const noteText = noteInput.value.trim();
            if (!noteText) {
                showWarning('Vui l√≤ng nh·∫≠p n·ªôi dung th∆∞!');
                return;
            }
            
            // Disable button ƒë·ªÉ tr√°nh double click
            saveBtn.disabled = true;
            saveBtn.textContent = 'ƒêang g·ª≠i...';
            
            try {
                // console.log('üîç B·∫Øt ƒë·∫ßu g·ª≠i th∆∞...');
                // console.log('üîç Firebase db object:', typeof db);
                
                if (typeof db === 'undefined') {
                    throw new Error('Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!');
                }
                
                const hisDataRef = db.collection('userInfo').doc('hisData');
                // console.log('üîç Reference created:', hisDataRef);
                
                // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
                // console.log('üîç ƒêang l·∫•y d·ªØ li·ªáu hi·ªán t·∫°i...');
                const hisDoc = await hisDataRef.get();
                // console.log('üîç Document exists:', hisDoc.exists);
                
                const currentData = hisDoc.exists ? hisDoc.data() : {};
                const existingNotes = currentData.notesForHer || [];
                // console.log('üîç Existing notes count:', existingNotes.length);
                
                // T·∫°o th∆∞ m·ªõi
                const newNote = {
                    message: noteText,
                    timestamp: new Date().toISOString(),
                    id: Date.now().toString()
                };
                // console.log('üîç New note created:', newNote);
                
                // Th√™m th∆∞ m·ªõi v√†o danh s√°ch
                const updatedNotes = [newNote, ...existingNotes];
                // console.log('üîç Updated notes count:', updatedNotes.length);
                
                // C·∫≠p nh·∫≠t l√™n Firebase
                // console.log('üîç ƒêang c·∫≠p nh·∫≠t l√™n Firebase...');
                // console.log('üîç Data to update:', {
                //     notesForHer: updatedNotes,
                //     lastUpdated: new Date().toISOString()
                // });
                
                await hisDataRef.update({
                    notesForHer: updatedNotes,
                    lastUpdated: new Date().toISOString()
                });
                // console.log('‚úÖ Firebase update completed!');
                
                // Verify the update
                const verifyDoc = await hisDataRef.get();
                const verifyData = verifyDoc.data();
                // console.log('üîç Verification - notesForHer count:', verifyData.notesForHer?.length || 0);
                // console.log('üîç Verification - latest note:', verifyData.notesForHer?.[0]);
                
                noteInput.value = '';
                showSuccess('ƒê√£ g·ª≠i th∆∞ th√†nh c√¥ng! üíå Em s·∫Ω nh·∫≠n ƒë∆∞·ª£c th∆∞ ngay l·∫≠p t·ª©c!');
                
                // console.log('‚úÖ ƒê√£ g·ª≠i th∆∞ m·ªõi:', newNote);
                
                // Test: Ki·ªÉm tra xem h·ªôp th∆∞ c√≥ ƒë∆∞·ª£c l∆∞u kh√¥ng
                setTimeout(async () => {
                    try {
                        const testDoc = await hisDataRef.get();
                        const testData = testDoc.data();
                        // console.log('üß™ Test - H·ªôp th∆∞ trong database:', testData.notesForHer?.length || 0, 'th∆∞');
                        // if (testData.notesForHer && testData.notesForHer.length > 0) {
                        //     console.log('üß™ Test - Th∆∞ m·ªõi nh·∫•t:', testData.notesForHer[0]);
                        // }
                    } catch (error) {
                        console.error('üß™ Test - L·ªói khi ki·ªÉm tra:', error);
                    }
                }, 1000);
                
            } catch (error) {
                console.error("L·ªói khi g·ª≠i th∆∞:", error);
                showError("ƒê√£ c√≥ l·ªói x·∫£y ra khi g·ª≠i th∆∞.");
            } finally {
                // Re-enable button
                saveBtn.disabled = false;
                saveBtn.textContent = 'G·ª≠i v√†o h·ªôp th∆∞';
            }
        });
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "Ng√¢n H√†ng √ù T∆∞·ªüng" (B·∫£n xem tr∆∞·ªõc).
 * @param {string[]} initialIdeas - M·∫£ng c√°c √Ω t∆∞·ªüng t·ª´ Firestore.
 */
function setupIdeaWidget(initialIdeas) {
    const ideaList = document.getElementById('idea-preview-list');
    if (!ideaList) return;

    ideaList.innerHTML = '';
    const ideasToShow = initialIdeas.slice(-3).reverse(); // L·∫•y 3 √Ω t∆∞·ªüng g·∫ßn nh·∫•t

    if (ideasToShow.length === 0) {
        ideaList.innerHTML = '<p>Ch∆∞a c√≥ √Ω t∆∞·ªüng n√†o...</p>';
    } else {
        ideasToShow.forEach(ideaText => {
            const p = document.createElement('p');
            p.innerText = `- ${ideaText}`;
            ideaList.appendChild(p);
        });
    }
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget xem tr∆∞·ªõc "L·ªãch Tu·∫ßn C·ªßa Em".
 * @param {object[]} schedule - M·∫£ng c√°c s·ª± ki·ªán t·ª´ Firestore.
 */
function setupSchedulePreview(schedule) {
    const previewEl = document.getElementById('next-event-preview');
    if (!previewEl) return;

    if (!schedule || schedule.length === 0) {
        previewEl.innerHTML = '<p>Tu·∫ßn n√†y em r·∫£nh!</p>';
        return;
    }
    
    // T√¨m s·ª± ki·ªán s·∫Øp t·ªõi d·ª±a tr√™n timeline th·ª±c t·∫ø
    const now = new Date();
    const currentDay = now.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ..., 6 = Th·ª© 7
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    const currentTime = currentHour * 60 + currentMinute;
    
    // Debug: Log th·ªùi gian hi·ªán t·∫°i chi ti·∫øt
    // console.log(`üïê Detailed current time:`, {
    //     now: now.toString(),
    //     currentDay: currentDay,
    //     currentHour: currentHour,
    //     currentMinute: currentMinute,
    //     currentTime: currentTime,
    //     timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    // });
    
    // Convert currentDay to match schedule format (2 = Th·ª© 2, 3 = Th·ª© 3, ..., 8 = Ch·ªß nh·∫≠t)
    const scheduleCurrentDay = currentDay === 0 ? 8 : currentDay + 1;
    
    // Debug: Log th√¥ng tin th·ªùi gian hi·ªán t·∫°i
    // console.log(`üïê Current time debug:`, {
    //     currentDay: currentDay,
    //     scheduleCurrentDay: scheduleCurrentDay,
    //     currentHour: currentHour,
    //     currentMinute: currentMinute,
    //     currentTime: currentTime,
    //     dayName: currentDay === 0 ? 'Ch·ªß nh·∫≠t' : ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][currentDay - 1]
    // });
    
    let nextEvent = null;
    let earliestEvent = null;
    
    // S·∫Øp x·∫øp events theo timeline (t·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng thay ƒë·ªïi m·∫£ng g·ªëc)
    const sortedEvents = [...schedule].sort((a, b) => {
        if (a.day !== b.day) return a.day - b.day;
        return a.startTime.localeCompare(b.startTime);
    });
    
    // Debug: Log th·ª© t·ª± s·ª± ki·ªán
    // console.log('üìÖ Schedule events (sorted):', sortedEvents.map(e => `${e.day}-${e.startTime}: ${e.title}`));
    
    // Debug: Ki·ªÉm tra s·ª± ki·ªán Ch·ªß nh·∫≠t
    const sundayEvents = sortedEvents.filter(e => e.day === 8);
    // console.log('üìÖ Sunday events:', sundayEvents.map(e => `${e.startTime}: ${e.title}`));
    // console.log('üìÖ Sunday events count:', sundayEvents.length);
    
    // Debug: Ki·ªÉm tra n·∫øu h√¥m nay l√† Ch·ªß nh·∫≠t
    if (scheduleCurrentDay === 8) {
        // console.log('üìÖ Today is Sunday! Looking for Sunday events...');
        const todaySundayEvents = sundayEvents.filter(e => {
            const [eventHour, eventMinute] = e.startTime.split(':').map(Number);
            const eventTime = eventHour * 60 + eventMinute;
            return eventTime > currentTime;
        });
        // console.log('üìÖ Sunday events after current time:', todaySundayEvents.map(e => `${e.startTime}: ${e.title}`));
    }
    
    // T√¨m s·ª± ki·ªán s·∫Øp t·ªõi
    for (const event of sortedEvents) {
        const [eventHour, eventMinute] = event.startTime.split(':').map(Number);
        const eventTime = eventHour * 60 + eventMinute;
        
        // Debug: Ki·ªÉm tra parsing th·ªùi gian
        // console.log(`‚è∞ Time parsing for ${event.title}:`, {
        //     startTime: event.startTime,
        //     eventHour: eventHour,
        //     eventMinute: eventMinute,
        //     eventTime: eventTime,
        //     isNaN: isNaN(eventTime)
        // });
        
        // console.log(`üîç Checking event: ${event.title} (Day: ${event.day}, Time: ${event.startTime}, EventTime: ${eventTime}, CurrentTime: ${currentTime})`);
        // console.log(`   - Is today? ${Number(event.day) === scheduleCurrentDay} (event.day: ${event.day} (${typeof event.day}), scheduleCurrentDay: ${scheduleCurrentDay} (${typeof scheduleCurrentDay}))`);
        // console.log(`   - Time not passed? ${eventTime > currentTime} (eventTime: ${eventTime}, currentTime: ${currentTime})`);
        // console.log(`   - Comparison: Number(${event.day}) === ${scheduleCurrentDay} = ${Number(event.day) === scheduleCurrentDay}`);
        
        // N·∫øu event trong ng√†y hi·ªán t·∫°i v√† th·ªùi gian ch∆∞a qua
        if (Number(event.day) === scheduleCurrentDay && eventTime > currentTime) {
            nextEvent = event;
            // console.log(`‚úÖ Found next event today: ${event.title}`);
            break;
        }
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p Ch·ªß nh·∫≠t: n·∫øu h√¥m nay l√† Ch·ªß nh·∫≠t v√† c√≥ s·ª± ki·ªán Ch·ªß nh·∫≠t
        else if (scheduleCurrentDay === 8 && Number(event.day) === 8) {
            // N·∫øu th·ªùi gian ch∆∞a qua, ch·ªçn s·ª± ki·ªán n√†y
            if (eventTime > currentTime) {
                nextEvent = event;
                // console.log(`‚úÖ Found next event Sunday: ${event.title}`);
                break;
            }
        }
        
        // L∆∞u event ƒë·∫ßu ti√™n l√†m fallback (ch·ªâ khi ch∆∞a c√≥ nextEvent)
        if (!nextEvent && !earliestEvent) {
            earliestEvent = event;
            // console.log(`üìå Set as earliest event: ${event.title}`);
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ch∆∞a qua trong ng√†y h√¥m nay, ch·ªçn s·ª± ki·ªán g·∫ßn nh·∫•t trong ng√†y h√¥m nay
    if (!nextEvent) {
        // T√¨m t·∫•t c·∫£ s·ª± ki·ªán trong ng√†y h√¥m nay
        const todayEvents = sortedEvents.filter(event => Number(event.day) === scheduleCurrentDay);
        
        if (todayEvents.length > 0) {
            // S·∫Øp x·∫øp s·ª± ki·ªán h√¥m nay theo th·ªùi gian (t·ª´ mu·ªôn nh·∫•t ƒë·∫øn s·ªõm nh·∫•t)
            todayEvents.sort((a, b) => {
                const [aHour, aMinute] = a.startTime.split(':').map(Number);
                const [bHour, bMinute] = b.startTime.split(':').map(Number);
                const aTime = aHour * 60 + aMinute;
                const bTime = bHour * 60 + bMinute;
                return bTime - aTime; // S·∫Øp x·∫øp gi·∫£m d·∫ßn (mu·ªôn nh·∫•t tr∆∞·ªõc)
            });
            
            nextEvent = todayEvents[0]; // Ch·ªçn s·ª± ki·ªán mu·ªôn nh·∫•t trong ng√†y h√¥m nay
            // console.log(`‚úÖ Found latest event today: ${nextEvent.title}`);
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y event trong ng√†y h√¥m nay, t√¨m event trong ng√†y t∆∞∆°ng lai
    if (!nextEvent) {
        for (const event of sortedEvents) {
            const [eventHour, eventMinute] = event.startTime.split(':').map(Number);
            const eventTime = eventHour * 60 + eventMinute;
            
            // N·∫øu event trong ng√†y t∆∞∆°ng lai
            if (Number(event.day) > scheduleCurrentDay) {
                nextEvent = event;
                // console.log(`‚úÖ Found next event future: ${event.title}`);
                break;
            }
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y event s·∫Øp t·ªõi trong tu·∫ßn n√†y, t√¨m event s·ªõm nh·∫•t trong tu·∫ßn ti·∫øp theo
    if (!nextEvent) {
        // T√¨m event s·ªõm nh·∫•t trong tu·∫ßn ti·∫øp theo
        // N·∫øu h√¥m nay l√† Ch·ªß nh·∫≠t (8), t√¨m event t·ª´ Th·ª© 2 (2) tr·ªü ƒëi
        // N·∫øu kh√¥ng ph·∫£i Ch·ªß nh·∫≠t, t√¨m event t·ª´ ng√†y ti·∫øp theo tr·ªü ƒëi
        const nextWeekEvent = sortedEvents.find(event => {
            if (scheduleCurrentDay === 8) {
                // N·∫øu h√¥m nay l√† Ch·ªß nh·∫≠t, t√¨m event t·ª´ Th·ª© 2 tr·ªü ƒëi
                return Number(event.day) >= 2;
            } else {
                // N·∫øu kh√¥ng ph·∫£i Ch·ªß nh·∫≠t, t√¨m event t·ª´ ng√†y ti·∫øp theo tr·ªü ƒëi
                return Number(event.day) > scheduleCurrentDay;
            }
        });
        
        if (nextWeekEvent) {
            nextEvent = nextWeekEvent;
            // console.log(`üîÑ Using next week event: ${nextWeekEvent.title}`);
        } else if (earliestEvent) {
            // Fallback cu·ªëi c√πng: event s·ªõm nh·∫•t trong tu·∫ßn
            nextEvent = earliestEvent;
            // console.log(`üîÑ Using earliest event as fallback: ${earliestEvent?.title}`);
        }
    }
    
    // console.log(`üéØ Final selected event: ${nextEvent?.title} (Day: ${nextEvent?.day}, Time: ${nextEvent?.startTime})`);
    // console.log(`üéØ Event selection reason:`, {
    //     isSunday: scheduleCurrentDay === 8,
    //     selectedEventDay: nextEvent?.day,
    //     selectedEventTime: nextEvent?.startTime,
    //     currentTime: currentTime,
    //     wasTimePassed: nextEvent ? (() => {
    //         const [eventHour, eventMinute] = nextEvent.startTime.split(':').map(Number);
    //         const eventTime = eventHour * 60 + eventMinute;
    //         return eventTime <= currentTime;
    //     })() : null
    // });
    
    // Format ng√†y hi·ªÉn th·ªã
    const dayNames = ['', '', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß Nh·∫≠t'];
    const dayName = dayNames[nextEvent.day] || `Ng√†y ${nextEvent.day}`;
    
    previewEl.innerHTML = `
        <p>S·ª± ki·ªán ti·∫øp theo</p>
        <div class="event-title">${nextEvent.title}</div>
        <div class="event-time">${dayName} - ${nextEvent.startTime}</div>
    `;
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "K·∫ø Ho·∫°ch H·∫πn H√≤".
 * @param {object} plan - Object k·∫ø ho·∫°ch h·∫πn h√≤ t·ª´ Firestore.
 */
function setupDatePlanner(plan) {
    const displayEl = document.getElementById('date-plan-display');
    const manageBtn = document.getElementById('manage-date-plan-btn');
    const modal = document.getElementById('date-plan-modal');
    if (!displayEl) return;

    // Hi·ªÉn th·ªã k·∫ø ho·∫°ch hi·ªán t·∫°i
    if (plan && plan.isActive) {
        const date = plan.dateTime.toDate();
        displayEl.innerHTML = `
            <div class="plan-title">${plan.title}</div>
            <div class="plan-time">${date.toLocaleDateString('vi-VN')} - ${date.toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'})}</div>
            <p>${plan.location}</p>
        `;
    } else {
        displayEl.innerHTML = '<p>Ch∆∞a c√≥ k·∫ø ho·∫°ch n√†o. H√£y t·∫°o m·ªôt bu·ªïi h·∫πn b·∫•t ng·ªù!</p>';
    }

    // X·ª≠ l√Ω n√∫t b·∫•m m·ªü modal
    manageBtn.addEventListener('click', () => {
        if (plan && plan.isActive) { // ƒêi·ªÅn th√¥ng tin c≈© n·∫øu c√≥
            document.getElementById('date-title-input').value = plan.title;
            const date = plan.dateTime.toDate();
            date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
            document.getElementById('date-time-input').value = date.toISOString().slice(0,16);
            document.getElementById('date-location-input').value = plan.location;
            document.getElementById('date-note-input').value = plan.note;
        }
        modal.classList.add('visible');
    });

    // X·ª≠ l√Ω c√°c n√∫t trong modal
    document.getElementById('cancel-date-plan-button')?.addEventListener('click', () => modal.classList.remove('visible'));
    
    document.getElementById('save-date-plan-button')?.addEventListener('click', async () => {
        const newPlan = {
            isActive: true,
            title: document.getElementById('date-title-input').value,
            dateTime: new Date(document.getElementById('date-time-input').value),
            location: document.getElementById('date-location-input').value,
            note: document.getElementById('date-note-input').value,
        };
        const herDataRef = db.collection('userInfo').doc('herData');
        await herDataRef.update({ dateNightPlan: newPlan });
        showSuccess('ƒê√£ g·ª≠i l·ªùi m·ªùi h·∫πn h√≤! ‚ù§Ô∏è');
        location.reload();
    });

    document.getElementById('delete-date-plan-button')?.addEventListener('click', async () => {
        if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy k·∫ø ho·∫°ch h·∫πn h√≤ n√†y?')) return;
        const herDataRef = db.collection('userInfo').doc('herData');
        await herDataRef.update({ 'dateNightPlan.isActive': false });
        showInfo('ƒê√£ h·ªßy k·∫ø ho·∫°ch.');
        location.reload();
    });
}

/**
 * Thi·∫øt l·∫≠p logic cho Widget "S·ª± Ki·ªán ƒê·∫øm Ng∆∞·ª£c".
 */
function setupCountdownEvent(eventData) {
    const saveBtn = document.getElementById('save-event-btn');
    const clearBtn = document.getElementById('clear-event-btn');
    
    if (!saveBtn || !clearBtn) return;

    // Load d·ªØ li·ªáu hi·ªán t·∫°i n·∫øu c√≥
    if (eventData) {
        document.getElementById('event-title').value = eventData.title || '';
        document.getElementById('event-date').value = eventData.date || '';
        document.getElementById('event-time').value = eventData.time || '';
        document.getElementById('event-location').value = eventData.location || '';
        document.getElementById('event-description').value = eventData.description || '';
    }

    // X·ª≠ l√Ω l∆∞u s·ª± ki·ªán
    saveBtn.addEventListener('click', async () => {
        const eventData = {
            title: document.getElementById('event-title').value.trim(),
            date: document.getElementById('event-date').value,
            time: document.getElementById('event-time').value,
            location: document.getElementById('event-location').value.trim(),
            description: document.getElementById('event-description').value.trim()
        };

        // Validation
        if (!eventData.title) {
            showWarning('Vui l√≤ng nh·∫≠p t√™n s·ª± ki·ªán!');
            return;
        }
        if (!eventData.date) {
            showWarning('Vui l√≤ng ch·ªçn ng√†y di·ªÖn ra!');
            return;
        }
        if (!eventData.time) {
            showWarning('Vui l√≤ng ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu!');
            return;
        }
        if (!eventData.location) {
            showWarning('Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm!');
            return;
        }

        // Disable button
        saveBtn.disabled = true;
        saveBtn.textContent = 'ƒêang l∆∞u...';

        try {
            if (typeof db === 'undefined') {
                throw new Error('Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!');
            }

            const hisDataRef = db.collection('userInfo').doc('hisData');
            await hisDataRef.update({ countdownEvent: eventData });
            
            showSuccess('ƒê√£ l∆∞u s·ª± ki·ªán ƒë·∫øm ng∆∞·ª£c! ‚è∞');
            
            // C·∫≠p nh·∫≠t her-dashboard n·∫øu c√≥
            const herDataRef = db.collection('userInfo').doc('herData');
            await herDataRef.update({ countdownEvent: eventData });
            
        } catch (error) {
            console.error('L·ªói khi l∆∞u s·ª± ki·ªán:', error);
            showError('C√≥ l·ªói x·∫£y ra khi l∆∞u s·ª± ki·ªán!');
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = 'üíæ L∆∞u S·ª± Ki·ªán';
        }
    });

    // X·ª≠ l√Ω x√≥a s·ª± ki·ªán
    clearBtn.addEventListener('click', async () => {
        if (!await showConfirmDialog('X√°c nh·∫≠n x√≥a', 'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·ª± ki·ªán ƒë·∫øm ng∆∞·ª£c n√†y?')) {
            return;
        }

        clearBtn.disabled = true;
        clearBtn.textContent = 'ƒêang x√≥a...';

        try {
            if (typeof db === 'undefined') {
                throw new Error('Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!');
            }

            const hisDataRef = db.collection('userInfo').doc('hisData');
            await hisDataRef.update({ countdownEvent: null });
            
            // X√≥a form
            document.getElementById('event-title').value = '';
            document.getElementById('event-date').value = '';
            document.getElementById('event-time').value = '';
            document.getElementById('event-location').value = '';
            document.getElementById('event-description').value = '';
            
            showSuccess('ƒê√£ x√≥a s·ª± ki·ªán ƒë·∫øm ng∆∞·ª£c!');
            
            // C·∫≠p nh·∫≠t her-dashboard n·∫øu c√≥
            const herDataRef = db.collection('userInfo').doc('herData');
            await herDataRef.update({ countdownEvent: null });
            
        } catch (error) {
            console.error('L·ªói khi x√≥a s·ª± ki·ªán:', error);
            showError('C√≥ l·ªói x·∫£y ra khi x√≥a s·ª± ki·ªán!');
        } finally {
            clearBtn.disabled = false;
            clearBtn.textContent = 'üóëÔ∏è X√≥a S·ª± Ki·ªán';
        }
    });
}